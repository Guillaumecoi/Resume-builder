{"_type":"export","__export_format":4,"__export_date":"2024-11-21T11:17:25.164Z","__export_source":"insomnia.desktop.app:v10.0.0","resources":[{"_id":"req_b80b9d1aff0d41fd9a856219a2bf8e6d","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732177124770,"created":1732176249689,"url":"http://localhost:9090/realms/resume-builder/protocol/openid-connect/token","name":"Get accessToken","description":"","method":"POST","body":{"mimeType":"application/x-www-form-urlencoded","params":[{"id":"pair_1c7951201ea64a32996aa130a1fc6286","name":"grant_type","value":"password","description":"","disabled":false},{"id":"pair_e916532cb72f4fd5a9275cacb30841bc","name":"client_id","value":"rb","description":"","disabled":false},{"id":"pair_f8dedb7611d547c0834ab21bdfb1a18b","name":"username","value":"test@example.com","description":"","disabled":false},{"id":"pair_3adeca6fbc074bd6a2a32ea3838c7e3f","name":"password","value":"password","description":"","disabled":false}]},"parameters":[],"headers":[{"name":"Content-Type","value":"application/x-www-form-urlencoded"},{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{},"metaSortKey":-1732176249689,"isPrivate":false,"pathParameters":[],"afterResponseScript":"const response = JSON.parse(insomnia.response.body);\nconst accessToken = response.access_token;\n\nif (accessToken) {\n  insomnia.environment.set(\"accessToken\", accessToken);\n} else {\n  throw new Error(\"Access token not found in the response\");\n}","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"wrk_b59712b303cb49f99a71a64f83efbeb9","parentId":null,"modified":1732176204833,"created":1732176204833,"name":"resume-builder","description":"","scope":"collection","_type":"workspace"},{"_id":"req_925908883e474e4eb7e3458e0b66237a","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732185000685,"created":1732177129153,"url":"http://localhost:8080/api/v1/resume","name":"Create resume","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n    \"title\": \"Software Engineer\",\n    \"firstName\": \"John\", \n    \"lastName\": \"Doe\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"metaSortKey":-1732176249589,"isPrivate":false,"pathParameters":[],"afterResponseScript":"// Retrieve the raw response text\nlet responseText = insomnia.response.text();\n\n// Attempt to parse the response as an integer\nlet resumeId = parseInt(responseText, 10);\n\ninsomnia.test(\"Status code is 200\", function () {\n    insomnia.response.to.have.status(200);\n});\n\n// Test to ensure the response is a valid integer ID\ninsomnia.test(\"Response should be a valid resume ID\", function () {\n    insomnia.expect(resumeId).to.be.a('number');\n    insomnia.expect(resumeId).to.be.above(0); // Assuming IDs are positive integers\n});\n\n// If the resumeId is valid, set it as an environment variable\nif (!isNaN(resumeId) && resumeId > 0) {\n    insomnia.environment.set(\"resumeId\", resumeId);\n    console.log(\"New resumeId set to:\", resumeId);\n}","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_55b757d1d642433b9f0da5cdaaf99467","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732185600079,"created":1732177427088,"url":"http://localhost:8080/api/v1/resume/{{ _.resumeId }}","name":"Read resume","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"preRequestScript":"","metaSortKey":-1732176249539,"isPrivate":false,"pathParameters":[],"afterResponseScript":"// Retrieve the resumeId from the environment variables\nconst resumeId = insomnia.environment.get(\"resumeId\");\n\n// Define the expected values\nconst expectedValues = {\n    id: parseInt(resumeId, 10), // Ensure the id is a number\n    title: \"Software Engineer\",\n    firstName: \"John\",\n    lastName: \"Doe\"\n};\n\n// Parse the JSON response\nlet jsonData = insomnia.response.json();\n\n// Check that all expected fields are present and have the correct values\ninsomnia.test(\"Response contains all expected fields with correct values\", function () {\n    insomnia.expect(jsonData).to.have.property(\"id\", expectedValues.id);\n    insomnia.expect(jsonData).to.have.property(\"createdDate\").that.is.a(\"string\");\n    insomnia.expect(jsonData).to.have.property(\"lastModifiedDate\").that.is.a(\"string\");\n\n    for (const [key, value] of Object.entries(expectedValues)) {\n        insomnia.expect(jsonData).to.have.property(key, value);\n    }\n});\n\n// Optional: Log the response for debugging\nconsole.log(jsonData);","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_2f1cda6e65654654a46408a6fdae6a0f","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732185871257,"created":1732177643028,"url":"http://localhost:8080/api/v1/resume/{{ _.resumeId }}/uploadPicture","name":"Upload picture resume","description":"","method":"POST","body":{"mimeType":"multipart/form-data","params":[{"id":"pair_75e0fce272ef425fb01a4d07363549dd","name":"file","value":"","description":"","disabled":false,"type":"file","fileName":"/run/user/1000/doc/952a6e68/Guillaume.jpg"}]},"parameters":[],"headers":[{"name":"Content-Type","value":"multipart/form-data"},{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"metaSortKey":-1732176249439,"isPrivate":false,"pathParameters":[],"afterResponseScript":"insomnia.test(\"Status code is 200\", function () {\n    insomnia.response.to.have.status(202);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_f85f127a2cb24788b3974bb8caee6e4b","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732185099916,"created":1732184971014,"url":"http://localhost:8080/api/v1/resume","name":"Create resume 2","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n    \"title\": \"Barista\",\n    \"firstName\": \"Jane\", \n    \"lastName\": \"Doe\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"metaSortKey":-1732176249339,"isPrivate":false,"pathParameters":[],"afterResponseScript":"// Retrieve the raw response text\nlet responseText = insomnia.response.text();\n\n// Attempt to parse the response as an integer\nlet resumeId = parseInt(responseText, 10);\n\ninsomnia.test(\"Status code is 200\", function () {\n    insomnia.response.to.have.status(200);\n});\n\n// Test to ensure the response is a valid integer ID\ninsomnia.test(\"Response should be a valid resume ID\", function () {\n    insomnia.expect(resumeId).to.be.a('number');\n    insomnia.expect(resumeId).to.be.above(0); // Assuming IDs are positive integers\n});\n\n// If the resumeId is valid, set it as an environment variable\nif (!isNaN(resumeId) && resumeId > 0) {\n    insomnia.environment.set(\"resumeId\", resumeId);\n    console.log(\"New resumeId set to:\", resumeId);\n}","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9f04b3282378473c8b54ae99f7992150","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732185459028,"created":1732185112935,"url":"http://localhost:8080/api/v1/resume/{{ _.resumeId }}","name":"Update resume 2","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n    \"title\": \"Barista\",\n    \"firstName\": \"Jane\", \n    \"lastName\": \"Brown\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"metaSortKey":-1732176249289,"isPrivate":false,"pathParameters":[],"afterResponseScript":"insomnia.test(\"Status code is 200\", function () {\n    insomnia.response.to.have.status(202);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_962c5286db2e4543a74c0b40dbb337e4","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732187245169,"created":1732187219445,"url":"http://localhost:8080/api/v1/resume","name":"Create resume 3","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n    \"title\": \"test\",\n    \"firstName\": \"test\", \n    \"lastName\": \"test\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"metaSortKey":-1732176249214,"isPrivate":false,"pathParameters":[],"afterResponseScript":"// Retrieve the raw response text\nlet responseText = insomnia.response.text();\n\n// Attempt to parse the response as an integer\nlet resumeId = parseInt(responseText, 10);\n\ninsomnia.test(\"Status code is 200\", function () {\n    insomnia.response.to.have.status(200);\n});\n\n// Test to ensure the response is a valid integer ID\ninsomnia.test(\"Response should be a valid resume ID\", function () {\n    insomnia.expect(resumeId).to.be.a('number');\n    insomnia.expect(resumeId).to.be.above(0); // Assuming IDs are positive integers\n});\n\n// If the resumeId is valid, set it as an environment variable\nif (!isNaN(resumeId) && resumeId > 0) {\n    insomnia.environment.set(\"resumeId\", resumeId);\n    console.log(\"New resumeId set to:\", resumeId);\n}","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a9b7618af15c4626a86cd48d53dbac35","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732187256915,"created":1732185574264,"url":"http://localhost:8080/api/v1/resume","name":"Read all resumes","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"preRequestScript":"","metaSortKey":-1732176249139,"isPrivate":false,"pathParameters":[],"afterResponseScript":"const chai = require('chai');\nconst expect = chai.expect;\n\nconst jsonData = JSON.parse(insomnia.response.body);\n\n// Test array length\ninsomnia.test(\"Response has exactly 3 items\", () => {\n  insomnia.expect(jsonData.content).to.have.lengthOf(3);\n});\n\n// Find John and Jane's entries\nconst john = jsonData.content.find(item => item.firstName === \"John\");\nconst jane = jsonData.content.find(item => item.firstName === \"Jane\");\n\n// Test John's data\ninsomnia.test(\"John's data is correct\", () => {\n  insomnia.expect(john.title).to.equal(\"Software Engineer\");\n  insomnia.expect(john.lastName).to.equal(\"Doe\");\n\tchai.expect(john.picture).to.not.be.null;\n});\n\n// Test Jane's data\ninsomnia.test(\"Jane's data is correct\", () => {\n  insomnia.expect(jane.title).to.equal(\"Barista\");\n  insomnia.expect(jane.lastName).to.equal(\"Brown\");\n});\n\n// Test required fields exist for both\n[john, jane].forEach(person => {\n  insomnia.test(`${person.firstName} has all required fields`, () => {\n    expect(person).to.have.property('createdDate');\n    expect(person).to.have.property('lastModifiedDate');\n    expect(person).to.have.property('picture');\n  });\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_33e236f1d8bd409eaf0b98756172afab","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732187301242,"created":1732187197370,"url":"http://localhost:8080/api/v1/resume/{{ _.resumeId }}/delete","name":"delete resume 3","description":"","method":"POST","body":{},"parameters":[],"headers":[{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"metaSortKey":-1732176249039,"isPrivate":false,"pathParameters":[],"afterResponseScript":"insomnia.test(\"Status code is 200\", function () {\n    insomnia.response.to.have.status(202);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b60d5925044549a09dbce2da3f81c7c2","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732187454849,"created":1732187384888,"url":"http://localhost:8080/api/v1/resume","name":"Read all resumes","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"preRequestScript":"","metaSortKey":-1732176248939,"isPrivate":false,"pathParameters":[],"afterResponseScript":"const jsonData = JSON.parse(insomnia.response.body);\n\n// Test array length\ninsomnia.test(\"Response has exactly 2 items\", () => {\n  insomnia.expect(jsonData.content).to.have.lengthOf(2);\n});\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_90abb717a213407e9b6926cb2fde4b64","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732187468979,"created":1732187421492,"url":"http://localhost:8080/api/v1/resume/deleteAll","name":"delete all resume","description":"","method":"POST","body":{},"parameters":[],"headers":[{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"metaSortKey":-1732176248839,"isPrivate":false,"pathParameters":[],"afterResponseScript":"insomnia.test(\"Status code is 200\", function () {\n    insomnia.response.to.have.status(202);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_076f361652ad409b8f07eb8c794f2996","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732187757551,"created":1732187431542,"url":"http://localhost:8080/api/v1/resume","name":"Read all resumes","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"User-Agent","value":"insomnia/10.0.0"}],"authentication":{"type":"bearer","token":"{{accessToken}}"},"preRequestScript":"","metaSortKey":-1732176248739,"isPrivate":false,"pathParameters":[],"afterResponseScript":"const jsonData = JSON.parse(insomnia.response.body);\n\n// Test array length\ninsomnia.test(\"Response has no items\", () => {\n  insomnia.expect(jsonData.content).to.have.lengthOf(0);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_aa235d76c93b4f99fcd62e79277956d05738c1ec","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732187760723,"created":1732176204835,"name":"Base Environment","data":{"accessToken":"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJDVzdjSjdzLXdGWGRhRFN0Z19FdmgyOWwwTWtZd2N6em9aalRVTEV1VXBnIn0.eyJleHAiOjE3MzIyNzIxOTMsImlhdCI6MTczMjE4NTc5MywianRpIjoiZmU4NjQzNjctZDM1ZC00NDg2LThhYTItMTMxMzhjMzI2NTkzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo5MDkwL3JlYWxtcy9yZXN1bWUtYnVpbGRlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJiN2RiYWJjYS1jY2I2LTQzNjUtOWE1Ny1kOWVjZjVjZTMxZGEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJyYiIsInNpZCI6IjY4N2VkNWNiLTdjNGYtNDk2OS1hNDJjLWYzMDU4MDMwYzJhOSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cDovL3Jlc3VtZS1iYWNrZW5kOjgwODAiLCJodHRwOi8vbG9jYWxob3N0OjgwODAiLCJodHRwOi8vcmVzdW1lLWZyb250ZW5kOjQyMDAiLCJodHRwOi8vbG9jYWxob3N0OjQyMDAiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImRlZmF1bHQtcm9sZXMtcmVzdW1lLWJ1aWxkZXIiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsicmIiOnsicm9sZXMiOlsidXNlciJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOiJUZXN0IFVzZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0QGV4YW1wbGUuY29tIiwiZ2l2ZW5fbmFtZSI6IlRlc3QiLCJmYW1pbHlfbmFtZSI6IlVzZXIiLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20ifQ.b7yq-iQf6hUg9JbHO9uGjcSEqtOR-WJTSbPD68dsk8faG65G0FR6h3_4d_9e1XqwUrrQzJ0ApqzekraR7bFX4liXaRem9UbQjkkDPjAdveKNKCqmQOLGernPB02edEyzCW3VhLnIQXPtP5kpW8QLu2ZmqdNskvYlNf9XLu9gmgqMgIXhLj5mehlHTDl88x9Pshuz8RMGqtrRztKfTacfQMatIDPoATXPhnBLdJ0fAaTg8UYD6COG4WHTospG7ittyAgx171VYsIm79_ut0RFdUpHfYID9JyOPcQ6gtv3qEo_Jbe4I2cByFxTwtK5-z-bYy53ZLMpa0SbbRNqbfI5oA","resumeId":52},"dataPropertyOrder":{"&":["accessToken","resumeId"]},"color":null,"isPrivate":false,"metaSortKey":1732176204835,"_type":"environment"},{"_id":"jar_aa235d76c93b4f99fcd62e79277956d05738c1ec","parentId":"wrk_b59712b303cb49f99a71a64f83efbeb9","modified":1732187760721,"created":1732176204836,"name":"Default Jar","cookies":[{"id":"ceab8975-5974-4555-97aa-d6d1b8600a36","key":"JSESSIONID","value":"9EBF927845303BF57741AB43DBD0404A","expires":"Infinity","domain":"localhost","path":"/api/v1","secure":false,"httpOnly":true,"extensions":[],"creation":"2024-11-21T08:20:09.074Z","hostOnly":true,"lastAccessed":"2024-11-21T08:20:09.074Z"}],"_type":"cookie_jar"}]}